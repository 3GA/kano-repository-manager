#!/usr/bin/env ruby

require "thor"
require "fileutils"
require "io/console"

require "dr/repo"
require "dr/gitpackage"
require "dr/debpackage"

require "dr/shellcmd"
require "dr/logger"
require "dr/config"

class ExtendedThor < Thor
  private
  include Dr::Logger

  def get_repo_handle
    if @conf == nil
      @conf = Dr::Config.new ["/etc/drepo.conf", "~/.drepo.conf"]
    end

    if options.has_key? "repo"
      Dr::Repo.new options["repo"]
    else
      if @conf.default_repo != nil
        Dr::Repo.new @conf.repositories[@conf.default_repo][:location]
      else
        log :warn, "No repo was specified, using '#{Dir.pwd}'."
        Dr::Repo.new Dir.pwd
      end
    end
  end
end

class Archive < ExtendedThor
  #desc "save TAG", "make a snapshot of the current archive"
  #def save(tag)
  #end

  #desc "restore TAG", "replace the current archive with an earlier snapshot"
  #def restore(tag)
  #end

  #desc "list-versions", "show all snapshots"
  #map  "list-versions" => :list_versions
  #def list_versions
  #end
end

class List < ExtendedThor
  desc "packages", "show a list of source packages in the repo"
  def packages()
    repo = get_repo_handle
    log :info, "Listing all source packages in the repository"

    repo.list_packages.each do |pkg|
      log :info, "  #{pkg.name}"
    end
  end

  desc "versions PACKAGE", "show the history of all available versions for a package"
  def versions(pkg_name)
    repo = get_repo_handle
    log :info, "Listing all built versions of '#{pkg_name}'"

    suites = repo.get_suites

    pkg = repo.get_package pkg_name
    pkg.history.each do |version|
      line = "#{version}"
      suites.each do |suite, codename|
        codename = suite if codename == nil
        if pkg.build_exists? version
          debs = repo.get_build pkg.name, version
          subpkgs = debs.map { |p| subpkg = File.basename(p).split("_")[0] }

          all_included = true
          subpkgs.each do |subpkg|
            unless repo.query_for_deb_version(suite, subpkg) == version
              all_included = false
            end
          end

          line << " [#{codename}]" if all_included
        end
      end
      log :info, "  #{line}"
    end
  end
end

class RepoCLI < ExtendedThor
  class_option :repo, :type => :string, :aliases => "-r"

  desc "init [LOCATION]", "setup a whole new repository from scratch"
  def init(location=".")
    log :info, "Initialising a debian repository at '#{location.fg("blue")}'"

    repo_conf = {
      :name => "Debian Repository",
      :desc => "",
      :arches => ["amd64"],
      :components => ["main"],
      :suites => ["stable", "testing", "unstable"],
      :codenames => []
    }

    name = ask "  Repository name "<< "[#{repo_conf[:name].fg("yellow")}]:"
    repo_conf[:name] = name if name.length > 0

    desc = ask "  Description [#{repo_conf[:desc]}]:"
    repo_conf[:desc] = desc if desc.length > 0

    arches = ask "  Architectures [#{repo_conf[:arches].join(" ").fg("yellow")}]:"
    repo_conf[:arches] = arches.split /\s+/ if arches.length > 0

    components = ask "  Components [#{repo_conf[:components].join(" ").fg("yellow")}]:"
    repo_conf[:components] = components.split /\s+/ if components.length > 0

    repo_conf[:gpg_name] = ""
    while repo_conf[:gpg_name].length == 0
      repo_conf[:gpg_name] = ask "  Cert owner name (#{"required".fg("red")}):"
      repo_conf[:gpg_name].strip!
    end

    repo_conf[:gpg_mail] = ""
    while repo_conf[:gpg_mail].length == 0
      repo_conf[:gpg_mail] = ask "  Cert owner e-mail (#{"required".fg("red")}):"
      repo_conf[:gpg_mail].strip!
    end

    print "  Passphrase (#{"optional".fg("green")}): "
    repo_conf[:gpg_pass] = STDIN.noecho(&:gets).chomp
    print "\n"

    repo_conf[:suites].each do |s|
      codename = ask "  Codename for '#{s.fg("yellow")}':"
      repo_conf[:codenames].push codename
    end

    r = Dr::Repo.new location
    r.setup repo_conf
  end

  desc "add", "introduce a new package to the build system"
  method_option :git, :aliases => "-g",
    :desc => "Add source package managed in a git repo"
  method_option :deb, :aliases => "-d",
    :desc => "Add a prebuilt binary deb package only"
  method_option :force, :aliases => "-f",
    :desc => "Proceed even if the package already exists"
  method_option :branch, :aliases => "-b",
    :desc => "Set a default branch other than master (valid only with --git)"
  def add
    repo = get_repo_handle

    case
    when options.has_key?("git")
      branch = "master"
      branch = options["branch"] if options.has_key? "branch"

      Dr::GitPackage::setup repo, options["git"], branch
    when options.has_key?("deb")
      Dr::DebPackage::setup repo, options["deb"]
    else
      raise ArgumentError, "Either --git or --deb must be specified"
    end
  end

  # drepo build [pkg-name] --branch [topic-branch]
  # drepo build [pkg-name] --branch [topic-branch] --push [suite] -f
  #
  #   - The old script basically
  #   - Change versions to date stamps
  #   - Add support for scratch suite builds
  desc "build [pkg-name]", "build a package from the sources"
  method_option :branch, :aliases => "-b", :type => :string,
                :desc => "build from a different branch"
  method_option :push, :aliases => "-p", :type => :string,
                :desc => "push to suite immediately after building"
  method_option :force, :aliases => "-f", :type => :boolean,
                :desc => "force build even when no changes have been made"
  def build(pkg_name)
    repo = get_repo_handle

    force = false
    force = options["force"] if options.has_key? "force"

    branch = nil
    branch = options["branch"] if options.has_key? "branch"

    pkg = repo.get_package pkg_name
    version = pkg.build branch, force

    if options["push"] && version
      if options["push"] == "push"
        repo.push pkg.name, version, "testing" # FIXME: should be configurable
      else
        repo.push pkg.name, version, options["push"]
      end
    end
  end

  # drepo push [pkg-name] -f --suite X --version Y
  desc "push [pkg-name]", "push a built package to a specified suite"
  method_option :suite, :aliases => "-s", :type => :string,
                :desc => "the target suite (defaults to testing)"
  method_option :version, :aliases => "-v", :type => :string,
                :desc => "which version to push (defaults to the highest one build)"
  method_option :force, :aliases => "-f", :type => :boolean,
                :desc => "force inclusion of the package to the suite"
  def push(pkg_name)
    repo = get_repo_handle

    suite = nil
    suite = options["suite"] if options.has_key? "suite"

    version = nil
    version = options["version"] if options.has_key? "version"

    repo.push pkg_name, version, suite, options["force"] == true
  end

  desc "unpush [pkg-name] [suite]", "remove a built package from a suite"
  def unpush(pkg_name, suite)
    repo = get_repo_handle
    repo.unpush pkg_name, suite
  end

  desc "list SUBCOMMAND [ARGS]", "show information about packages"
  subcommand "list", List

  desc "rm [pkg-name]", "remove a package completely from the build system"
  method_option :force, :aliases => "-f", :type => :boolean,
                :desc => "force removal even if the package is still used"
  def rm(pkg_name)
    repo = get_repo_handle
    repo.remove pkg_name, options["force"] == true
  end

  desc "rmbuild [pkg-name] [version]", "remove a built version of a package"
  method_option :force, :aliases => "-f", :type => :boolean,
                :desc => "force removal even if the build is still used"
  def rmbuild(pkg_name, version)
    repo = get_repo_handle
    repo.remove_build pkg_name, version, options["force"] == true
  end

  desc "release", "push all the packages from testing to release"
  def release
    repo = get_repo_handle

    log :info, "Releasing all packages from testing"
    repo.list_packages.each do |pkg|
      repo.push pkg.name, nil, "stable"
    end
  end

  desc "snapshot", "save a snapshot of the archive"
  def snapshot(tag)
    repo = get_repo_handle

    log :info, "Releasing all packages from testing"
    repo.list_packages.each do |pkg|
      repo.push pkg.name, nil, "stable"
    end
  end
end

#begin
  RepoCLI.start ARGV
#rescue Exception => e
#  Dr::Logger.log :err, e.to_s
#end
